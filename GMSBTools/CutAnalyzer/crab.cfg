[CRAB]

jobtype = cmssw
#scheduler = glitecoll
scheduler = glite
### NOTE: just setting the name of the server (pi, lnl etc etc )
###       crab will submit the jobs to the server...
use_server = 1
#server_name = bari

[CMSSW]

### The data you want to access (to be found on DBS)
#datasetpath = /MinimumBias/Commissioning10-May6thPDSkim2_SD_EG-v1/RECO
#datasetpath = /MinimumBias/Commissioning10-SD_EG-v9/RECO
datasetpath = /PhotonJet_Pt15/Spring10-START3X_V26_S09-v1/GEN-SIM-RECO

### The ParameterSet you want to use
pset = cutanalyzer_cfg.py

### Splitting parameters
total_number_of_events = -1
events_per_job = 10000
#number_of_jobs = 1

#lumi_mask = /afs/cern.ch/cms/CAF/CMSCOMM/COMM_DQM/certification/Collisions10/7TeV/StreamExpress/Cert_132440-135175_7TeV_StreamExpress_Collisions10_JSON.txt
#total_number_of_lumis = -1
#lumis_per_job = 1000

#runselection = 134988-135175

### The output files (comma separated list)
output_file = ff_test_photon_jet_pT15_HLT15_pT20.root,out_photon_jet_pT15_HLT15_pT20.root,CutAnalyzer_debug_photon_jet_pT15_HLT15_pT20.txt,debug_photon_jet_pT15_HLT15_pT20.txt

[USER]

### OUTPUT files Management
##  output back into UI
return_data = 0

### To use a specific name of UI directory where CRAB will create job to submit (with full path).
### the default directory will be "crab_0_data_time"
ui_working_dir = /afs/cern.ch/user/y/yohay/CMSSW_3_5_8_patch3/src/GMSBTools/CutAnalyzer/photon_jet_pT15_HLT15_pT20

### To specify the UI directory where to store the CMS executable output
### FULL path is mandatory. Default is  <ui_working_dir>/res will be used.
#outputdir= /full/path/yourOutDir

### To specify the UI directory where to store the stderr, stdout and .BrokerInfo of submitted jobs
### FULL path is mandatory. Default is <ui_working_dir>/res will be used.
#logdir= /full/path/yourLogDir

### OUTPUT files INTO A SE
copy_data = 1

### if you want to copy data in a "official CMS site"
### you have to specify the name as written in 
#storage_element = T3_US_UVA
### the user_remote_dir will be created under the SE mountpoint
### in the case of publication this directory is not considered
#user_remote_dir = SUSYPAT_photonjet/pT15

### if you want to copy your data at CAF
#storage_element = T2_CH_CAF
### the user_remote_dir will be created under the SE mountpoint
### in the case of publication this directory is not considered
#user_remote_dir = name_directory_you_want

### if you want to copy your data to your area in castor at cern
### or in a "not official CMS site" you have to specify the complete name of SE
storage_element=srm-cms.cern.ch
### this directory is the mountpoin of SE 
storage_path=/srm/managerv2?SFN=/castor/cern.ch
### directory or tree of directory under the mounpoint 
user_remote_dir=/user/y/yohay/EG_SD_skim_test/photon_jet_pT15_HLT15_pT20

### To publish produced output in a local istance of DBS set publish_data = 1
publish_data=0
### Specify the dataset name. The full path will be <primarydataset>/<publish_data_name>/USER
#publish_data_name = name_you_prefer
### Specify the URL of DBS istance where CRAB has to publish the output files
#dbs_url_for_publication = https://cmsdbsprod.cern.ch:8443/cms_dbs_caf_analysis_01_writer/servlet/DBSServlet 

### To specify additional files to be put in InputSandBox
### write the full path  if the files are not in the current directory
### (wildcard * are allowed): comma separated list
#additional_input_files = file1, file2, /full/path/file3

#if server
thresholdLevel = 80
eMail = Rachel.Yohay@cern.ch

[GRID]
#
## RB/WMS management:
rb = CERN

##  Black and White Lists management:
## By Storage
#se_black_list = T0,T1
#se_white_list =

## By ComputingElement
ce_black_list = ce.indiacms.res.in,f-ce02.grid.sinica.edu.tw,cox01.grid.metu.edu.tr
#ce_white_list =

retry_count = 5
shallow_retry_count = 5

[CONDORG]

# Set this to condor to override the batchsystem defined in gridcat.
#batchsystem = condor

# Specify addition condor_g requirments
# use this requirment to run on a cms dedicated hardare
# globus_rsl = (condor_submit=(requirements 'ClusterName == \"CMS\" && (Arch == \"INTEL\" || Arch == \"X86_64\")'))
# use this requirement to run on the new hardware
#globus_rsl = (condor_submit=(requirements 'regexp(\"cms-*\",Machine)'))